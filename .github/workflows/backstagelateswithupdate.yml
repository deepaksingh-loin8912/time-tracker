name: Setup and Build Backstage App

on:
  push:
    branches:
      - main
  workflow_dispatch:
permissions:
  id-token: write
  contents: read


jobs:
  setup-backstage:
    runs-on: ubuntu-latest
    env:
      APP_NAME: mybackstage

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Update & Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y curl git build-essential
          sudo apt-get install -y expect
      
      - name: Install NVM
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash

      - name: Setup Node.js with NVM
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install 20
          nvm use 20
          npm install -g npm@11.6.1
          npm install -g yarn@1
        shell: bash

      - name: Generate Backstage App Non-Interactively
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm use 20
          expect  -c "
            
            set appname \$env(APP_NAME)
            spawn npx @backstage/create-app
            expect \"Enter a name for the app\"
            send \"\$appname\r\"
            expect eof
          "
        env:
          APP_NAME: ${{ env.APP_NAME }}
      

      

      

      - name: Move into Backstage App Directory
        working-directory: ./mybackstage
        run: echo "Moved into mybackstage folder"

      - name: Install Dependencies (Yarn)
        working-directory: ./mybackstage
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          yarn install
        
        env:
          YARN_ENABLE_IMMUTABLE_INSTALLS: false
        shell: bash

      - name: Build Backend
        working-directory: ./mybackstage
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          yarn workspace backend build
          yarn build:backend
        shell: bash
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        working-directory: ./mybackstage
        run: |
          export DOCKER_BUILDKIT=1
          docker build -f packages/backend/Dockerfile -t backstage .

      - name: Save Backstage Docker Image as TAR
        working-directory: ./mybackstage
        run: |
          mkdir -p docker_images
          docker save backstage:latest -o docker_images/backstage-latest.tar

      

      - name: Upload Backstage Docker Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: backstage-image
          path: ./mybackstage/docker_images/backstage-latest.tar
          

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
             role-to-assume: arn:aws:iam::266980971030:role/iam-gh-ecr_admin
             aws-region: ap-southeast-2
             
     

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-2 | \
            docker login --username AWS --password-stdin 266980971030.dkr.ecr.ap-southeast-2.amazonaws.com

      - name: Push Backstage Docker Image to ECR
        run: |
          chmod +x scripts/push-docker-image.sh
          ./scripts/push-docker-image.sh load_push scripts/backstage.docker-images.json
        env:
          AWS_REGION: ap-southeast-2
          AWS_ACCOUNT_ID: 266980971030

          
         
